pipeline {
    agent any

    environment {
        // node
        NVM_DIR = "${env.HOME}/.nvm"
        NODE_VERSION = '20.15.1'
        PATH = "${env.PATH}:${env.NVM_DIR}/versions/node/v${NODE_VERSION}/bin"

        SSH_KEY = credentials('') // Use credential ID instead of full key
        DATABASE_URL=''
    }

    stages {
        stage('Setup Node.js') {
            steps {
                script {
                    sh '''
                        # Install nvm if not already installed
                        if [ ! -d "$NVM_DIR" ]; then
                            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
                        fi
                        
                        # Load nvm and install Node.js
                        export NVM_DIR="$HOME/.nvm"
                        [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
                        nvm install ${NODE_VERSION}
                        nvm use ${NODE_VERSION}
                    '''
                }
            }
        }

        stage('Cleanup') {
            steps {
                cleanWs()
            }
        }

        stage('Clone Repository') {
            steps {
                script {
                    git branch: 'staging', credentialsId: '', url: 'git@github.com:username/repo.git'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    sh '''
                        npm install -g pnpm
                        pnpm install --no-frozen-lockfile
                    '''
                }
            }
        }

        stage('Generate Prisma Client') {
            steps {
                script {
                    sh 'npx prisma generate'
                }
            }
        }

        stage('Run Migrations') {
            steps {
                script {
                    sh 'npx prisma migrate dev'
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    sh 'pnpm run build'
                }
            }
        }
    }

    post {
        always {
            script {
                deleteDir()
            }
        }
    }
}

